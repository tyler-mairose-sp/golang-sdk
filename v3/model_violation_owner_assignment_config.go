/*
IdentityNow V3 API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the ViolationOwnerAssignmentConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViolationOwnerAssignmentConfig{}

// ViolationOwnerAssignmentConfig struct for ViolationOwnerAssignmentConfig
type ViolationOwnerAssignmentConfig struct {
	// Details about the violations owner. MANAGER - identity's manager STATIC - Governance Group or Identity
	AssignmentRule *string `json:"assignmentRule,omitempty"`
	OwnerRef *BaseReferenceDto `json:"ownerRef,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ViolationOwnerAssignmentConfig ViolationOwnerAssignmentConfig

// NewViolationOwnerAssignmentConfig instantiates a new ViolationOwnerAssignmentConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViolationOwnerAssignmentConfig() *ViolationOwnerAssignmentConfig {
	this := ViolationOwnerAssignmentConfig{}
	return &this
}

// NewViolationOwnerAssignmentConfigWithDefaults instantiates a new ViolationOwnerAssignmentConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViolationOwnerAssignmentConfigWithDefaults() *ViolationOwnerAssignmentConfig {
	this := ViolationOwnerAssignmentConfig{}
	return &this
}

// GetAssignmentRule returns the AssignmentRule field value if set, zero value otherwise.
func (o *ViolationOwnerAssignmentConfig) GetAssignmentRule() string {
	if o == nil || isNil(o.AssignmentRule) {
		var ret string
		return ret
	}
	return *o.AssignmentRule
}

// GetAssignmentRuleOk returns a tuple with the AssignmentRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViolationOwnerAssignmentConfig) GetAssignmentRuleOk() (*string, bool) {
	if o == nil || isNil(o.AssignmentRule) {
		return nil, false
	}
	return o.AssignmentRule, true
}

// HasAssignmentRule returns a boolean if a field has been set.
func (o *ViolationOwnerAssignmentConfig) HasAssignmentRule() bool {
	if o != nil && !isNil(o.AssignmentRule) {
		return true
	}

	return false
}

// SetAssignmentRule gets a reference to the given string and assigns it to the AssignmentRule field.
func (o *ViolationOwnerAssignmentConfig) SetAssignmentRule(v string) {
	o.AssignmentRule = &v
}

// GetOwnerRef returns the OwnerRef field value if set, zero value otherwise.
func (o *ViolationOwnerAssignmentConfig) GetOwnerRef() BaseReferenceDto {
	if o == nil || isNil(o.OwnerRef) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.OwnerRef
}

// GetOwnerRefOk returns a tuple with the OwnerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViolationOwnerAssignmentConfig) GetOwnerRefOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.OwnerRef) {
		return nil, false
	}
	return o.OwnerRef, true
}

// HasOwnerRef returns a boolean if a field has been set.
func (o *ViolationOwnerAssignmentConfig) HasOwnerRef() bool {
	if o != nil && !isNil(o.OwnerRef) {
		return true
	}

	return false
}

// SetOwnerRef gets a reference to the given BaseReferenceDto and assigns it to the OwnerRef field.
func (o *ViolationOwnerAssignmentConfig) SetOwnerRef(v BaseReferenceDto) {
	o.OwnerRef = &v
}

func (o ViolationOwnerAssignmentConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViolationOwnerAssignmentConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AssignmentRule) {
		toSerialize["assignmentRule"] = o.AssignmentRule
	}
	if !isNil(o.OwnerRef) {
		toSerialize["ownerRef"] = o.OwnerRef
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ViolationOwnerAssignmentConfig) UnmarshalJSON(bytes []byte) (err error) {
	varViolationOwnerAssignmentConfig := _ViolationOwnerAssignmentConfig{}

	if err = json.Unmarshal(bytes, &varViolationOwnerAssignmentConfig); err == nil {
		*o = ViolationOwnerAssignmentConfig(varViolationOwnerAssignmentConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "assignmentRule")
		delete(additionalProperties, "ownerRef")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableViolationOwnerAssignmentConfig struct {
	value *ViolationOwnerAssignmentConfig
	isSet bool
}

func (v NullableViolationOwnerAssignmentConfig) Get() *ViolationOwnerAssignmentConfig {
	return v.value
}

func (v *NullableViolationOwnerAssignmentConfig) Set(val *ViolationOwnerAssignmentConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableViolationOwnerAssignmentConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableViolationOwnerAssignmentConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViolationOwnerAssignmentConfig(val *ViolationOwnerAssignmentConfig) *NullableViolationOwnerAssignmentConfig {
	return &NullableViolationOwnerAssignmentConfig{value: val, isSet: true}
}

func (v NullableViolationOwnerAssignmentConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViolationOwnerAssignmentConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


