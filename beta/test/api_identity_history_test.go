/*
IdentityNow Beta API

Testing IdentityHistoryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package beta

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/sailpoint-oss/golang-sdk"
)

func Test_beta_IdentityHistoryApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityHistoryApiService CompareIdentitySnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryApi.CompareIdentitySnapshots(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService CompareIdentitySnapshotsAccessType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var accessType string

		resp, httpRes, err := apiClient.IdentityHistoryApi.CompareIdentitySnapshotsAccessType(context.Background(), id, accessType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService GetHistoricalIdentity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryApi.GetHistoricalIdentity(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService GetHistoricalIdentityEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryApi.GetHistoricalIdentityEvents(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService GetIdentitySnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var date string

		resp, httpRes, err := apiClient.IdentityHistoryApi.GetIdentitySnapshot(context.Background(), id, date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService GetIdentitySnapshotSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryApi.GetIdentitySnapshotSummary(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService GetIdentityStartDate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryApi.GetIdentityStartDate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService ListHistoricalIdentities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.IdentityHistoryApi.ListHistoricalIdentities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService ListIdentityAccessItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryApi.ListIdentityAccessItems(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService ListIdentitySnapshotAccessItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var date string

		resp, httpRes, err := apiClient.IdentityHistoryApi.ListIdentitySnapshotAccessItems(context.Background(), id, date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityHistoryApiService ListIdentitySnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.IdentityHistoryApi.ListIdentitySnapshots(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
