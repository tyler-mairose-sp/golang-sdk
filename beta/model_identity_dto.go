/*
IdentityNow Beta API

Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

API version: 3.1.0-beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package beta

import (
	"encoding/json"
	"time"
)

// checks if the IdentityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityDto{}

// IdentityDto struct for IdentityDto
type IdentityDto struct {
	// Alternate unique identifier for the identity
	Alias *string `json:"alias,omitempty"`
	// The email address of the identity
	EmailAddress *string `json:"emailAddress,omitempty"`
	// The processing state of the identity
	ProcessingState NullableString `json:"processingState,omitempty"`
	// The identity's status in the system
	IdentityStatus *string `json:"identityStatus,omitempty"`
	ManagerRef *BaseReferenceDto `json:"managerRef,omitempty"`
	// Whether this identity is a manager of another identity
	IsManager *bool `json:"isManager,omitempty"`
	// The last time the identity was refreshed by the system
	LastRefresh *time.Time `json:"lastRefresh,omitempty"`
	// A map with the identity attributes for the identity
	Attributes map[string]interface{} `json:"attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityDto IdentityDto

// NewIdentityDto instantiates a new IdentityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityDto() *IdentityDto {
	this := IdentityDto{}
	return &this
}

// NewIdentityDtoWithDefaults instantiates a new IdentityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityDtoWithDefaults() *IdentityDto {
	this := IdentityDto{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *IdentityDto) GetAlias() string {
	if o == nil || isNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDto) GetAliasOk() (*string, bool) {
	if o == nil || isNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *IdentityDto) HasAlias() bool {
	if o != nil && !isNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *IdentityDto) SetAlias(v string) {
	o.Alias = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *IdentityDto) GetEmailAddress() string {
	if o == nil || isNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDto) GetEmailAddressOk() (*string, bool) {
	if o == nil || isNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *IdentityDto) HasEmailAddress() bool {
	if o != nil && !isNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *IdentityDto) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetProcessingState returns the ProcessingState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDto) GetProcessingState() string {
	if o == nil || isNil(o.ProcessingState.Get()) {
		var ret string
		return ret
	}
	return *o.ProcessingState.Get()
}

// GetProcessingStateOk returns a tuple with the ProcessingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDto) GetProcessingStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProcessingState.Get(), o.ProcessingState.IsSet()
}

// HasProcessingState returns a boolean if a field has been set.
func (o *IdentityDto) HasProcessingState() bool {
	if o != nil && o.ProcessingState.IsSet() {
		return true
	}

	return false
}

// SetProcessingState gets a reference to the given NullableString and assigns it to the ProcessingState field.
func (o *IdentityDto) SetProcessingState(v string) {
	o.ProcessingState.Set(&v)
}
// SetProcessingStateNil sets the value for ProcessingState to be an explicit nil
func (o *IdentityDto) SetProcessingStateNil() {
	o.ProcessingState.Set(nil)
}

// UnsetProcessingState ensures that no value is present for ProcessingState, not even an explicit nil
func (o *IdentityDto) UnsetProcessingState() {
	o.ProcessingState.Unset()
}

// GetIdentityStatus returns the IdentityStatus field value if set, zero value otherwise.
func (o *IdentityDto) GetIdentityStatus() string {
	if o == nil || isNil(o.IdentityStatus) {
		var ret string
		return ret
	}
	return *o.IdentityStatus
}

// GetIdentityStatusOk returns a tuple with the IdentityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDto) GetIdentityStatusOk() (*string, bool) {
	if o == nil || isNil(o.IdentityStatus) {
		return nil, false
	}
	return o.IdentityStatus, true
}

// HasIdentityStatus returns a boolean if a field has been set.
func (o *IdentityDto) HasIdentityStatus() bool {
	if o != nil && !isNil(o.IdentityStatus) {
		return true
	}

	return false
}

// SetIdentityStatus gets a reference to the given string and assigns it to the IdentityStatus field.
func (o *IdentityDto) SetIdentityStatus(v string) {
	o.IdentityStatus = &v
}

// GetManagerRef returns the ManagerRef field value if set, zero value otherwise.
func (o *IdentityDto) GetManagerRef() BaseReferenceDto {
	if o == nil || isNil(o.ManagerRef) {
		var ret BaseReferenceDto
		return ret
	}
	return *o.ManagerRef
}

// GetManagerRefOk returns a tuple with the ManagerRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDto) GetManagerRefOk() (*BaseReferenceDto, bool) {
	if o == nil || isNil(o.ManagerRef) {
		return nil, false
	}
	return o.ManagerRef, true
}

// HasManagerRef returns a boolean if a field has been set.
func (o *IdentityDto) HasManagerRef() bool {
	if o != nil && !isNil(o.ManagerRef) {
		return true
	}

	return false
}

// SetManagerRef gets a reference to the given BaseReferenceDto and assigns it to the ManagerRef field.
func (o *IdentityDto) SetManagerRef(v BaseReferenceDto) {
	o.ManagerRef = &v
}

// GetIsManager returns the IsManager field value if set, zero value otherwise.
func (o *IdentityDto) GetIsManager() bool {
	if o == nil || isNil(o.IsManager) {
		var ret bool
		return ret
	}
	return *o.IsManager
}

// GetIsManagerOk returns a tuple with the IsManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDto) GetIsManagerOk() (*bool, bool) {
	if o == nil || isNil(o.IsManager) {
		return nil, false
	}
	return o.IsManager, true
}

// HasIsManager returns a boolean if a field has been set.
func (o *IdentityDto) HasIsManager() bool {
	if o != nil && !isNil(o.IsManager) {
		return true
	}

	return false
}

// SetIsManager gets a reference to the given bool and assigns it to the IsManager field.
func (o *IdentityDto) SetIsManager(v bool) {
	o.IsManager = &v
}

// GetLastRefresh returns the LastRefresh field value if set, zero value otherwise.
func (o *IdentityDto) GetLastRefresh() time.Time {
	if o == nil || isNil(o.LastRefresh) {
		var ret time.Time
		return ret
	}
	return *o.LastRefresh
}

// GetLastRefreshOk returns a tuple with the LastRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDto) GetLastRefreshOk() (*time.Time, bool) {
	if o == nil || isNil(o.LastRefresh) {
		return nil, false
	}
	return o.LastRefresh, true
}

// HasLastRefresh returns a boolean if a field has been set.
func (o *IdentityDto) HasLastRefresh() bool {
	if o != nil && !isNil(o.LastRefresh) {
		return true
	}

	return false
}

// SetLastRefresh gets a reference to the given time.Time and assigns it to the LastRefresh field.
func (o *IdentityDto) SetLastRefresh(v time.Time) {
	o.LastRefresh = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *IdentityDto) GetAttributes() map[string]interface{} {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDto) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *IdentityDto) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *IdentityDto) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

func (o IdentityDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !isNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if o.ProcessingState.IsSet() {
		toSerialize["processingState"] = o.ProcessingState.Get()
	}
	if !isNil(o.IdentityStatus) {
		toSerialize["identityStatus"] = o.IdentityStatus
	}
	if !isNil(o.ManagerRef) {
		toSerialize["managerRef"] = o.ManagerRef
	}
	if !isNil(o.IsManager) {
		toSerialize["isManager"] = o.IsManager
	}
	if !isNil(o.LastRefresh) {
		toSerialize["lastRefresh"] = o.LastRefresh
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityDto) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityDto := _IdentityDto{}

	if err = json.Unmarshal(bytes, &varIdentityDto); err == nil {
		*o = IdentityDto(varIdentityDto)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "alias")
		delete(additionalProperties, "emailAddress")
		delete(additionalProperties, "processingState")
		delete(additionalProperties, "identityStatus")
		delete(additionalProperties, "managerRef")
		delete(additionalProperties, "isManager")
		delete(additionalProperties, "lastRefresh")
		delete(additionalProperties, "attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityDto struct {
	value *IdentityDto
	isSet bool
}

func (v NullableIdentityDto) Get() *IdentityDto {
	return v.value
}

func (v *NullableIdentityDto) Set(val *IdentityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityDto(val *IdentityDto) *NullableIdentityDto {
	return &NullableIdentityDto{value: val, isSet: true}
}

func (v NullableIdentityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


